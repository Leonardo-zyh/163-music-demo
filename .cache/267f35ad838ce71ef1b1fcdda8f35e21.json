{"id":"..\\node_modules\\leancloud-storage\\docs\\object.js.html","dependencies":[{"name":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\package.json","includedInParent":true,"mtime":1537089220121},{"name":"./scripts\\prettify\\prettify.js","dynamic":true,"parent":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\object.js.html","resolved":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\scripts\\prettify\\prettify.js"},{"name":"./scripts\\prettify\\lang-css.js","dynamic":true,"parent":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\object.js.html","resolved":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\scripts\\prettify\\lang-css.js"},{"name":"./styles\\prettify.css","dynamic":true,"parent":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\object.js.html","resolved":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\styles\\prettify.css"},{"name":"./styles\\jsdoc.css","dynamic":true,"parent":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\object.js.html","resolved":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\styles\\jsdoc.css"},{"name":"./index.html","dynamic":true,"entry":true,"parent":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\object.js.html","resolved":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\index.html"},{"name":"./AV.ACL.html","dynamic":true,"entry":true,"parent":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\object.js.html","resolved":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\AV.ACL.html"},{"name":"./AV.Captcha.html","dynamic":true,"entry":true,"parent":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\object.js.html","resolved":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\AV.Captcha.html"},{"name":"./AV.Conversation.html","dynamic":true,"entry":true,"parent":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\object.js.html","resolved":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\AV.Conversation.html"},{"name":"./AV.Error.html","dynamic":true,"entry":true,"parent":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\object.js.html","resolved":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\AV.Error.html"},{"name":"./AV.File.html","dynamic":true,"entry":true,"parent":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\object.js.html","resolved":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\AV.File.html"},{"name":"./AV.GeoPoint.html","dynamic":true,"entry":true,"parent":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\object.js.html","resolved":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\AV.GeoPoint.html"},{"name":"./AV.InboxQuery.html","dynamic":true,"entry":true,"parent":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\object.js.html","resolved":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\AV.InboxQuery.html"},{"name":"./AV.Insight.JobQuery.html","dynamic":true,"entry":true,"parent":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\object.js.html","resolved":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\AV.Insight.JobQuery.html"},{"name":"./AV.Leaderboard.html","dynamic":true,"entry":true,"parent":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\object.js.html","resolved":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\AV.Leaderboard.html"},{"name":"./AV.LiveQuery.html","dynamic":true,"entry":true,"parent":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\object.js.html","resolved":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\AV.LiveQuery.html"},{"name":"./AV.Object.html","dynamic":true,"entry":true,"parent":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\object.js.html","resolved":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\AV.Object.html"},{"name":"./AV.Query.html","dynamic":true,"entry":true,"parent":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\object.js.html","resolved":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\AV.Query.html"},{"name":"./AV.Relation.html","dynamic":true,"entry":true,"parent":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\object.js.html","resolved":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\AV.Relation.html"},{"name":"./AV.Role.html","dynamic":true,"entry":true,"parent":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\object.js.html","resolved":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\AV.Role.html"},{"name":"./AV.SearchQuery.html","dynamic":true,"entry":true,"parent":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\object.js.html","resolved":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\AV.SearchQuery.html"},{"name":"./AV.SearchSortBuilder.html","dynamic":true,"entry":true,"parent":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\object.js.html","resolved":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\AV.SearchSortBuilder.html"},{"name":"./AV.Status.html","dynamic":true,"entry":true,"parent":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\object.js.html","resolved":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\AV.Status.html"},{"name":"./AV.User.html","dynamic":true,"entry":true,"parent":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\object.js.html","resolved":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\AV.User.html"},{"name":"./Statistic.html","dynamic":true,"entry":true,"parent":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\object.js.html","resolved":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\Statistic.html"},{"name":"./AV.html","dynamic":true,"entry":true,"parent":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\object.js.html","resolved":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\AV.html"},{"name":"./AV.Cloud.html","dynamic":true,"entry":true,"parent":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\object.js.html","resolved":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\AV.Cloud.html"},{"name":"./AV.Insight.html","dynamic":true,"entry":true,"parent":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\object.js.html","resolved":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\AV.Insight.html"},{"name":"./AV.Push.html","dynamic":true,"entry":true,"parent":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\object.js.html","resolved":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\AV.Push.html"},{"name":"./global.html","dynamic":true,"entry":true,"parent":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\object.js.html","resolved":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\global.html"},{"name":"./scripts\\linenumber.js","dynamic":true,"parent":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\object.js.html","resolved":"C:\\Users\\Administrator\\Desktop\\163-music-demo\\node_modules\\leancloud-storage\\docs\\scripts\\linenumber.js"}],"generated":{"html":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <title>object.js - Documentation</title>\n\n    <script src=\"/4cfc1f2b572ef03db14a51b1e6bd2800.js\"></script>\n    <script src=\"/1b5ae35eb04607b99b9b265d2e97413c.js\"></script>\n    <!--[if lt IE 9]>\n      <script src=\"//html5shiv.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"/6e9f51ec602f7fc4f941e7344ae64e5b.css\">\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"/274e9308aef3834be4d3813aa869153b.css\">\n</head>\n<body>\n\n<input type=\"checkbox\" id=\"nav-trigger\" class=\"nav-trigger\">\n<label for=\"nav-trigger\" class=\"navicon-button x\">\n  <div class=\"navicon\"></div>\n</label>\n\n<label for=\"nav-trigger\" class=\"overlay\"></label>\n\n<nav>\n    <h2><a href=\"/32f1a74c1c5fe360a3d78eb929ec49c7.html\">leancloud-storage</a> <span class=\"package-version\">v3.8.1</span></h2><h3>Classes</h3><ul><li><a href=\"/500afe60c6939fcbcc3d3342849c2e4d.html\">ACL</a><ul class=\"methods\"><li data-type=\"method\"><a href=\"/500afe60c6939fcbcc3d3342849c2e4d.html#getPublicReadAccess\">getPublicReadAccess</a></li><li data-type=\"method\"><a href=\"/500afe60c6939fcbcc3d3342849c2e4d.html#getPublicWriteAccess\">getPublicWriteAccess</a></li><li data-type=\"method\"><a href=\"/500afe60c6939fcbcc3d3342849c2e4d.html#getReadAccess\">getReadAccess</a></li><li data-type=\"method\"><a href=\"/500afe60c6939fcbcc3d3342849c2e4d.html#getRoleReadAccess\">getRoleReadAccess</a></li><li data-type=\"method\"><a href=\"/500afe60c6939fcbcc3d3342849c2e4d.html#getRoleWriteAccess\">getRoleWriteAccess</a></li><li data-type=\"method\"><a href=\"/500afe60c6939fcbcc3d3342849c2e4d.html#getWriteAccess\">getWriteAccess</a></li><li data-type=\"method\"><a href=\"/500afe60c6939fcbcc3d3342849c2e4d.html#setPublicReadAccess\">setPublicReadAccess</a></li><li data-type=\"method\"><a href=\"/500afe60c6939fcbcc3d3342849c2e4d.html#setPublicWriteAccess\">setPublicWriteAccess</a></li><li data-type=\"method\"><a href=\"/500afe60c6939fcbcc3d3342849c2e4d.html#setReadAccess\">setReadAccess</a></li><li data-type=\"method\"><a href=\"/500afe60c6939fcbcc3d3342849c2e4d.html#setRoleReadAccess\">setRoleReadAccess</a></li><li data-type=\"method\"><a href=\"/500afe60c6939fcbcc3d3342849c2e4d.html#setRoleWriteAccess\">setRoleWriteAccess</a></li><li data-type=\"method\"><a href=\"/500afe60c6939fcbcc3d3342849c2e4d.html#setWriteAccess\">setWriteAccess</a></li><li data-type=\"method\"><a href=\"/500afe60c6939fcbcc3d3342849c2e4d.html#toJSON\">toJSON</a></li></ul></li><li><a href=\"/cd178600daedfca783ae982925dd20db.html\">Captcha</a><ul class=\"methods\"><li data-type=\"method\"><a href=\"/cd178600daedfca783ae982925dd20db.html#.request\">request</a></li><li data-type=\"method\"><a href=\"/cd178600daedfca783ae982925dd20db.html#bind\">bind</a></li><li data-type=\"method\"><a href=\"/cd178600daedfca783ae982925dd20db.html#refresh\">refresh</a></li><li data-type=\"method\"><a href=\"/cd178600daedfca783ae982925dd20db.html#unbind\">unbind</a></li><li data-type=\"method\"><a href=\"/cd178600daedfca783ae982925dd20db.html#verify\">verify</a></li></ul></li><li><a href=\"/9ab4770c0af517a6d307beb0533a1c4e.html\">Conversation</a><ul class=\"methods\"><li data-type=\"method\"><a href=\"/9ab4770c0af517a6d307beb0533a1c4e.html#addMember\">addMember</a></li><li data-type=\"method\"><a href=\"/9ab4770c0af517a6d307beb0533a1c4e.html#broadcast\">broadcast</a></li><li data-type=\"method\"><a href=\"/9ab4770c0af517a6d307beb0533a1c4e.html#getCreator\">getCreator</a></li><li data-type=\"method\"><a href=\"/9ab4770c0af517a6d307beb0533a1c4e.html#getLastMessageAt\">getLastMessageAt</a></li><li data-type=\"method\"><a href=\"/9ab4770c0af517a6d307beb0533a1c4e.html#getMembers\">getMembers</a></li><li data-type=\"method\"><a href=\"/9ab4770c0af517a6d307beb0533a1c4e.html#getMutedMembers\">getMutedMembers</a></li><li data-type=\"method\"><a href=\"/9ab4770c0af517a6d307beb0533a1c4e.html#getName\">getName</a></li><li data-type=\"method\"><a href=\"/9ab4770c0af517a6d307beb0533a1c4e.html#isSystem\">isSystem</a></li><li data-type=\"method\"><a href=\"/9ab4770c0af517a6d307beb0533a1c4e.html#isTransient\">isTransient</a></li><li data-type=\"method\"><a href=\"/9ab4770c0af517a6d307beb0533a1c4e.html#send\">send</a></li></ul></li><li><a href=\"/6c6da53e6eb3790c9be4c8a9160ecbc0.html\">Error</a></li><li><a href=\"/07b374d13e164aca86af288d7550c522.html\">File</a><ul class=\"methods\"><li data-type=\"method\"><a href=\"/07b374d13e164aca86af288d7550c522.html#.createWithoutData\">createWithoutData</a></li><li data-type=\"method\"><a href=\"/07b374d13e164aca86af288d7550c522.html#.withURL\">withURL</a></li><li data-type=\"method\"><a href=\"/07b374d13e164aca86af288d7550c522.html#destroy\">destroy</a></li><li data-type=\"method\"><a href=\"/07b374d13e164aca86af288d7550c522.html#fetch\">fetch</a></li><li data-type=\"method\"><a href=\"/07b374d13e164aca86af288d7550c522.html#get\">get</a></li><li data-type=\"method\"><a href=\"/07b374d13e164aca86af288d7550c522.html#getACL\">getACL</a></li><li data-type=\"method\"><a href=\"/07b374d13e164aca86af288d7550c522.html#metaData\">metaData</a></li><li data-type=\"method\"><a href=\"/07b374d13e164aca86af288d7550c522.html#name\">name</a></li><li data-type=\"method\"><a href=\"/07b374d13e164aca86af288d7550c522.html#ownerId\">ownerId</a></li><li data-type=\"method\"><a href=\"/07b374d13e164aca86af288d7550c522.html#save\">save</a></li><li data-type=\"method\"><a href=\"/07b374d13e164aca86af288d7550c522.html#set\">set</a></li><li data-type=\"method\"><a href=\"/07b374d13e164aca86af288d7550c522.html#setACL\">setACL</a></li><li data-type=\"method\"><a href=\"/07b374d13e164aca86af288d7550c522.html#setUploadHeader\">setUploadHeader</a></li><li data-type=\"method\"><a href=\"/07b374d13e164aca86af288d7550c522.html#size\">size</a></li><li data-type=\"method\"><a href=\"/07b374d13e164aca86af288d7550c522.html#thumbnailURL\">thumbnailURL</a></li><li data-type=\"method\"><a href=\"/07b374d13e164aca86af288d7550c522.html#toFullJSON\">toFullJSON</a></li><li data-type=\"method\"><a href=\"/07b374d13e164aca86af288d7550c522.html#toJSON\">toJSON</a></li><li data-type=\"method\"><a href=\"/07b374d13e164aca86af288d7550c522.html#url\">url</a></li></ul></li><li><a href=\"/507f70cb2b141178f91c9a95599846ce.html\">GeoPoint</a><ul class=\"methods\"><li data-type=\"method\"><a href=\"/507f70cb2b141178f91c9a95599846ce.html#.current\">current</a></li><li data-type=\"method\"><a href=\"/507f70cb2b141178f91c9a95599846ce.html#kilometersTo\">kilometersTo</a></li><li data-type=\"method\"><a href=\"/507f70cb2b141178f91c9a95599846ce.html#milesTo\">milesTo</a></li><li data-type=\"method\"><a href=\"/507f70cb2b141178f91c9a95599846ce.html#radiansTo\">radiansTo</a></li><li data-type=\"method\"><a href=\"/507f70cb2b141178f91c9a95599846ce.html#toJSON\">toJSON</a></li></ul></li><li><a href=\"/614665e77c9ad14617b43a87818f9b0a.html\">InboxQuery</a><ul class=\"methods\"><li data-type=\"method\"><a href=\"/614665e77c9ad14617b43a87818f9b0a.html#inboxType\">inboxType</a></li><li data-type=\"method\"><a href=\"/614665e77c9ad14617b43a87818f9b0a.html#maxId\">maxId</a></li><li data-type=\"method\"><a href=\"/614665e77c9ad14617b43a87818f9b0a.html#owner\">owner</a></li><li data-type=\"method\"><a href=\"/614665e77c9ad14617b43a87818f9b0a.html#sinceId\">sinceId</a></li></ul></li><li><a href=\"/e6443a5665e09eb1907d4172d7d4e3d9.html\">JobQuery</a><ul class=\"methods\"><li data-type=\"method\"><a href=\"/e6443a5665e09eb1907d4172d7d4e3d9.html#find\">find</a></li><li data-type=\"method\"><a href=\"/e6443a5665e09eb1907d4172d7d4e3d9.html#limit\">limit</a></li><li data-type=\"method\"><a href=\"/e6443a5665e09eb1907d4172d7d4e3d9.html#skip\">skip</a></li></ul></li><li><a href=\"/ce12d9ca18a271e036ee2488ae864fda.html\">Leaderboard</a><ul class=\"methods\"><li data-type=\"method\"><a href=\"/ce12d9ca18a271e036ee2488ae864fda.html#.createLeaderboard\">createLeaderboard</a></li><li data-type=\"method\"><a href=\"/ce12d9ca18a271e036ee2488ae864fda.html#.createWithoutData\">createWithoutData</a></li><li data-type=\"method\"><a href=\"/ce12d9ca18a271e036ee2488ae864fda.html#.getLeaderboard\">getLeaderboard</a></li><li data-type=\"method\"><a href=\"/ce12d9ca18a271e036ee2488ae864fda.html#.getStatistics\">getStatistics</a></li><li data-type=\"method\"><a href=\"/ce12d9ca18a271e036ee2488ae864fda.html#.updateStatistics\">updateStatistics</a></li><li data-type=\"method\"><a href=\"/ce12d9ca18a271e036ee2488ae864fda.html#destroy\">destroy</a></li><li data-type=\"method\"><a href=\"/ce12d9ca18a271e036ee2488ae864fda.html#fetch\">fetch</a></li><li data-type=\"method\"><a href=\"/ce12d9ca18a271e036ee2488ae864fda.html#getArchives\">getArchives</a></li><li data-type=\"method\"><a href=\"/ce12d9ca18a271e036ee2488ae864fda.html#getResults\">getResults</a></li><li data-type=\"method\"><a href=\"/ce12d9ca18a271e036ee2488ae864fda.html#getResultsAroundUser\">getResultsAroundUser</a></li><li data-type=\"method\"><a href=\"/ce12d9ca18a271e036ee2488ae864fda.html#reset\">reset</a></li><li data-type=\"method\"><a href=\"/ce12d9ca18a271e036ee2488ae864fda.html#updateUpdateStrategy\">updateUpdateStrategy</a></li><li data-type=\"method\"><a href=\"/ce12d9ca18a271e036ee2488ae864fda.html#updateVersionChangeInterval\">updateVersionChangeInterval</a></li></ul></li><li><a href=\"/62182475aa64b9e08c852e0ad358a758.html\">LiveQuery</a><ul class=\"methods\"><li data-type=\"method\"><a href=\"/62182475aa64b9e08c852e0ad358a758.html#unsubscribe\">unsubscribe</a></li></ul></li><li><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html\">Object</a><ul class=\"methods\"><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#.%27new%27\">'new'</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#.createWithoutData\">createWithoutData</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#.destroyAll\">destroyAll</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#.extend\">extend</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#.fetchAll\">fetchAll</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#.register\">register</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#.saveAll\">saveAll</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#add\">add</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#addUnique\">addUnique</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#bitAnd\">bitAnd</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#bitOr\">bitOr</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#bitXor\">bitXor</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#change\">change</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#changedAttributes\">changedAttributes</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#clear\">clear</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#clone\">clone</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#destroy\">destroy</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#dirty\">dirty</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#escape\">escape</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#fetch\">fetch</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#fetchWhenSave\">fetchWhenSave</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#get\">get</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#getACL\">getACL</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#getCreatedAt\">getCreatedAt</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#getObjectId\">getObjectId</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#getUpdatedAt\">getUpdatedAt</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#has\">has</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#hasChanged\">hasChanged</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#increment\">increment</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#initialize\">initialize</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#isNew\">isNew</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#isValid\">isValid</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#op\">op</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#previous\">previous</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#previousAttributes\">previousAttributes</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#relation\">relation</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#remove\">remove</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#save\">save</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#set\">set</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#setACL\">setACL</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#toFullJSON\">toFullJSON</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#toJSON\">toJSON</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#unset\">unset</a></li><li data-type=\"method\"><a href=\"/1694d95c59449d44d778e6f9cddf2a42.html#validate\">validate</a></li></ul></li><li><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html\">Query</a><ul class=\"methods\"><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#.and\">and</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#.doCloudQuery\">doCloudQuery</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#.or\">or</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#addAscending\">addAscending</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#addDescending\">addDescending</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#ascending\">ascending</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#containedIn\">containedIn</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#contains\">contains</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#containsAll\">containsAll</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#count\">count</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#descending\">descending</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#destroyAll\">destroyAll</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#doesNotExist\">doesNotExist</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#doesNotMatchKeyInQuery\">doesNotMatchKeyInQuery</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#doesNotMatchQuery\">doesNotMatchQuery</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#each\">each</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#endsWith\">endsWith</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#equalTo\">equalTo</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#exists\">exists</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#find\">find</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#first\">first</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#get\">get</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#greaterThan\">greaterThan</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#greaterThanOrEqualTo\">greaterThanOrEqualTo</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#include\">include</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#includeACL\">includeACL</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#lessThan\">lessThan</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#lessThanOrEqualTo\">lessThanOrEqualTo</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#limit\">limit</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#matches\">matches</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#matchesKeyInQuery\">matchesKeyInQuery</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#matchesQuery\">matchesQuery</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#near\">near</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#notContainedIn\">notContainedIn</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#notEqualTo\">notEqualTo</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#scan\">scan</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#select\">select</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#sizeEqualTo\">sizeEqualTo</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#skip\">skip</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#startsWith\">startsWith</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#subscribe\">subscribe</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#toJSON\">toJSON</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#withinGeoBox\">withinGeoBox</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#withinKilometers\">withinKilometers</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#withinMiles\">withinMiles</a></li><li data-type=\"method\"><a href=\"/7c70008f6a0d7f45c0da153e2e714944.html#withinRadians\">withinRadians</a></li></ul></li><li><a href=\"/830b58dbd90b2d5b58dd96de38efcb2b.html\">Relation</a><ul class=\"methods\"><li data-type=\"method\"><a href=\"/830b58dbd90b2d5b58dd96de38efcb2b.html#.reverseQuery\">reverseQuery</a></li><li data-type=\"method\"><a href=\"/830b58dbd90b2d5b58dd96de38efcb2b.html#add\">add</a></li><li data-type=\"method\"><a href=\"/830b58dbd90b2d5b58dd96de38efcb2b.html#query\">query</a></li><li data-type=\"method\"><a href=\"/830b58dbd90b2d5b58dd96de38efcb2b.html#remove\">remove</a></li><li data-type=\"method\"><a href=\"/830b58dbd90b2d5b58dd96de38efcb2b.html#toJSON\">toJSON</a></li></ul></li><li><a href=\"/6eee974619376ec5d7bd5cff6ebd3ebd.html\">Role</a><ul class=\"methods\"><li data-type=\"method\"><a href=\"/6eee974619376ec5d7bd5cff6ebd3ebd.html#getName\">getName</a></li><li data-type=\"method\"><a href=\"/6eee974619376ec5d7bd5cff6ebd3ebd.html#getRoles\">getRoles</a></li><li data-type=\"method\"><a href=\"/6eee974619376ec5d7bd5cff6ebd3ebd.html#getUsers\">getUsers</a></li><li data-type=\"method\"><a href=\"/6eee974619376ec5d7bd5cff6ebd3ebd.html#setName\">setName</a></li></ul></li><li><a href=\"/a69d9ffc21ab8bae2e199b0bdbdcc34b.html\">SearchQuery</a><ul class=\"methods\"><li data-type=\"method\"><a href=\"/a69d9ffc21ab8bae2e199b0bdbdcc34b.html#addAscending\">addAscending</a></li><li data-type=\"method\"><a href=\"/a69d9ffc21ab8bae2e199b0bdbdcc34b.html#addDescending\">addDescending</a></li><li data-type=\"method\"><a href=\"/a69d9ffc21ab8bae2e199b0bdbdcc34b.html#ascending\">ascending</a></li><li data-type=\"method\"><a href=\"/a69d9ffc21ab8bae2e199b0bdbdcc34b.html#descending\">descending</a></li><li data-type=\"method\"><a href=\"/a69d9ffc21ab8bae2e199b0bdbdcc34b.html#find\">find</a></li><li data-type=\"method\"><a href=\"/a69d9ffc21ab8bae2e199b0bdbdcc34b.html#hasMore\">hasMore</a></li><li data-type=\"method\"><a href=\"/a69d9ffc21ab8bae2e199b0bdbdcc34b.html#highlights\">highlights</a></li><li data-type=\"method\"><a href=\"/a69d9ffc21ab8bae2e199b0bdbdcc34b.html#hits\">hits</a></li><li data-type=\"method\"><a href=\"/a69d9ffc21ab8bae2e199b0bdbdcc34b.html#include\">include</a></li><li data-type=\"method\"><a href=\"/a69d9ffc21ab8bae2e199b0bdbdcc34b.html#limit\">limit</a></li><li data-type=\"method\"><a href=\"/a69d9ffc21ab8bae2e199b0bdbdcc34b.html#queryString\">queryString</a></li><li data-type=\"method\"><a href=\"/a69d9ffc21ab8bae2e199b0bdbdcc34b.html#reset\">reset</a></li><li data-type=\"method\"><a href=\"/a69d9ffc21ab8bae2e199b0bdbdcc34b.html#sid\">sid</a></li><li data-type=\"method\"><a href=\"/a69d9ffc21ab8bae2e199b0bdbdcc34b.html#skip\">skip</a></li><li data-type=\"method\"><a href=\"/a69d9ffc21ab8bae2e199b0bdbdcc34b.html#sortBy\">sortBy</a></li></ul></li><li><a href=\"/ca79da55cde90e4b3c09b16b6e423dc2.html\">SearchSortBuilder</a><ul class=\"methods\"><li data-type=\"method\"><a href=\"/ca79da55cde90e4b3c09b16b6e423dc2.html#ascending\">ascending</a></li><li data-type=\"method\"><a href=\"/ca79da55cde90e4b3c09b16b6e423dc2.html#build\">build</a></li><li data-type=\"method\"><a href=\"/ca79da55cde90e4b3c09b16b6e423dc2.html#descending\">descending</a></li><li data-type=\"method\"><a href=\"/ca79da55cde90e4b3c09b16b6e423dc2.html#whereNear\">whereNear</a></li></ul></li><li><a href=\"/3e0b7dfffc933e56b2fb397688e06583.html\">Status</a><ul class=\"methods\"><li data-type=\"method\"><a href=\"/3e0b7dfffc933e56b2fb397688e06583.html#.countUnreadStatuses\">countUnreadStatuses</a></li><li data-type=\"method\"><a href=\"/3e0b7dfffc933e56b2fb397688e06583.html#.inboxQuery\">inboxQuery</a></li><li data-type=\"method\"><a href=\"/3e0b7dfffc933e56b2fb397688e06583.html#.resetUnreadCount\">resetUnreadCount</a></li><li data-type=\"method\"><a href=\"/3e0b7dfffc933e56b2fb397688e06583.html#.sendPrivateStatus\">sendPrivateStatus</a></li><li data-type=\"method\"><a href=\"/3e0b7dfffc933e56b2fb397688e06583.html#.sendStatusToFollowers\">sendStatusToFollowers</a></li><li data-type=\"method\"><a href=\"/3e0b7dfffc933e56b2fb397688e06583.html#.statusQuery\">statusQuery</a></li><li data-type=\"method\"><a href=\"/3e0b7dfffc933e56b2fb397688e06583.html#destroy\">destroy</a></li><li data-type=\"method\"><a href=\"/3e0b7dfffc933e56b2fb397688e06583.html#get\">get</a></li><li data-type=\"method\"><a href=\"/3e0b7dfffc933e56b2fb397688e06583.html#send\">send</a></li><li data-type=\"method\"><a href=\"/3e0b7dfffc933e56b2fb397688e06583.html#set\">set</a></li><li data-type=\"method\"><a href=\"/3e0b7dfffc933e56b2fb397688e06583.html#toObject\">toObject</a></li></ul></li><li><a href=\"/dbd38d554704b2eee25bf04c078929b1.html\">User</a><ul class=\"methods\"><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#.become\">become</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#.current\">current</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#.currentAsync\">currentAsync</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#.followeeQuery\">followeeQuery</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#.followerQuery\">followerQuery</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#.logIn\">logIn</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#.loginAnonymously\">loginAnonymously</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#.loginWithAuthData\">loginWithAuthData</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#.loginWithAuthDataAndUnionId\">loginWithAuthDataAndUnionId</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#.logInWithMobilePhone\">logInWithMobilePhone</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#.logInWithMobilePhoneSmsCode\">logInWithMobilePhoneSmsCode</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#.loginWithWeapp\">loginWithWeapp</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#.logOut\">logOut</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#.requestEmailVerify\">requestEmailVerify</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#.requestLoginSmsCode\">requestLoginSmsCode</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#.requestMobilePhoneVerify\">requestMobilePhoneVerify</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#.requestPasswordReset\">requestPasswordReset</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#.requestPasswordResetBySmsCode\">requestPasswordResetBySmsCode</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#.resetPasswordBySmsCode\">resetPasswordBySmsCode</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#.signUp\">signUp</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#.signUpOrlogInWithAuthData\">signUpOrlogInWithAuthData</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#.signUpOrlogInWithAuthDataAndUnionId\">signUpOrlogInWithAuthDataAndUnionId</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#.signUpOrlogInWithMobilePhone\">signUpOrlogInWithMobilePhone</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#.verifyMobilePhone\">verifyMobilePhone</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#associateWithAuthData\">associateWithAuthData</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#associateWithAuthDataAndUnionId\">associateWithAuthDataAndUnionId</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#authenticated\">authenticated</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#dissociateAuthData\">dissociateAuthData</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#fetch\">fetch</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#follow\">follow</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#followeeQuery\">followeeQuery</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#followerQuery\">followerQuery</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#getEmail\">getEmail</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#getMobilePhoneNumber\">getMobilePhoneNumber</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#getRoles\">getRoles</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#getSessionToken\">getSessionToken</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#getUsername\">getUsername</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#isAuthenticated\">isAuthenticated</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#isCurrent\">isCurrent</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#linkWithWeapp\">linkWithWeapp</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#logIn\">logIn</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#loginWithAuthData\">loginWithAuthData</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#loginWithAuthDataAndUnionId\">loginWithAuthDataAndUnionId</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#loginWithWeapp\">loginWithWeapp</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#refreshSessionToken\">refreshSessionToken</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#save\">save</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#setEmail\">setEmail</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#setMobilePhoneNumber\">setMobilePhoneNumber</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#setPassword\">setPassword</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#setUsername\">setUsername</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#signUp\">signUp</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#signUpOrlogInWithMobilePhone\">signUpOrlogInWithMobilePhone</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#unfollow\">unfollow</a></li><li data-type=\"method\"><a href=\"/dbd38d554704b2eee25bf04c078929b1.html#updatePassword\">updatePassword</a></li></ul></li><li><a href=\"/caf0b0ed77f512ca46c38d8e4eff127d.html\">Statistic</a></li></ul><h3>Events</h3><ul><li><a href=\"/62182475aa64b9e08c852e0ad358a758.html#Events\">AV.LiveQuery</a><ul class=\"events\"><a href=\"/62182475aa64b9e08c852e0ad358a758.html#event:create\">create</a><a href=\"/62182475aa64b9e08c852e0ad358a758.html#event:delete\">delete</a><a href=\"/62182475aa64b9e08c852e0ad358a758.html#event:enter\">enter</a><a href=\"/62182475aa64b9e08c852e0ad358a758.html#event:leave\">leave</a><a href=\"/62182475aa64b9e08c852e0ad358a758.html#event:update\">update</a></ul></li></ul><h3>Namespaces</h3><ul><li><a href=\"/9857994ab0446a3a9ae8e78a238868d2.html\">AV</a><ul class=\"methods\"><li data-type=\"method\"><a href=\"/9857994ab0446a3a9ae8e78a238868d2.html#.init\">init</a></li><li data-type=\"method\"><a href=\"/9857994ab0446a3a9ae8e78a238868d2.html#.parseJSON\">parseJSON</a></li><li data-type=\"method\"><a href=\"/9857994ab0446a3a9ae8e78a238868d2.html#.request\">request</a></li><li data-type=\"method\"><a href=\"/9857994ab0446a3a9ae8e78a238868d2.html#.setProduction\">setProduction</a></li><li data-type=\"method\"><a href=\"/9857994ab0446a3a9ae8e78a238868d2.html#.setRequestTimeout\">setRequestTimeout</a></li><li data-type=\"method\"><a href=\"/9857994ab0446a3a9ae8e78a238868d2.html#.setServerURLs\">setServerURLs</a></li></ul></li><li><a href=\"/84da14a070699c1d802d776a83c94381.html\">Cloud</a><ul class=\"methods\"><li data-type=\"method\"><a href=\"/84da14a070699c1d802d776a83c94381.html#.getServerDate\">getServerDate</a></li><li data-type=\"method\"><a href=\"/84da14a070699c1d802d776a83c94381.html#.requestCaptcha\">requestCaptcha</a></li><li data-type=\"method\"><a href=\"/84da14a070699c1d802d776a83c94381.html#.requestSmsCode\">requestSmsCode</a></li><li data-type=\"method\"><a href=\"/84da14a070699c1d802d776a83c94381.html#.rpc\">rpc</a></li><li data-type=\"method\"><a href=\"/84da14a070699c1d802d776a83c94381.html#.run\">run</a></li><li data-type=\"method\"><a href=\"/84da14a070699c1d802d776a83c94381.html#.useMasterKey\">useMasterKey</a></li><li data-type=\"method\"><a href=\"/84da14a070699c1d802d776a83c94381.html#.verifyCaptcha\">verifyCaptcha</a></li><li data-type=\"method\"><a href=\"/84da14a070699c1d802d776a83c94381.html#.verifySmsCode\">verifySmsCode</a></li></ul></li><li><a href=\"/3d5ecfdb1e9397b3c81c3b8f1c6edb2d.html\">Insight</a><ul class=\"methods\"><li data-type=\"method\"><a href=\"/3d5ecfdb1e9397b3c81c3b8f1c6edb2d.html#.on\">on</a></li><li data-type=\"method\"><a href=\"/3d5ecfdb1e9397b3c81c3b8f1c6edb2d.html#.startJob\">startJob</a></li></ul></li><li><a href=\"/d850dae6459664b88b80f66d22cbb9ec.html\">Push</a><ul class=\"methods\"><li data-type=\"method\"><a href=\"/d850dae6459664b88b80f66d22cbb9ec.html#.send\">send</a></li></ul></li></ul><h3><a href=\"/252a41dc0fbbe18dd04851874ffbac52.html\">Global</a></h3>\n</nav>\n\n<div id=\"main\">\n    \n    <h1 class=\"page-title\">object.js</h1>\n    \n\n    \n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>const _ = require('underscore');\nconst AVError = require('./error');\nconst Promise = require('./promise');\nconst { _request } = require('./request');\nconst {\n  isNullOrUndefined,\n  ensureArray,\n  transformFetchOptions,\n  setValue,\n  findValue,\n  isPlainObject,\n} = require('./utils');\n\nconst recursiveToPointer = value => {\n  if (_.isArray(value)) return value.map(recursiveToPointer);\n  if (isPlainObject(value)) return _.mapObject(value, recursiveToPointer);\n  if (_.isObject(value) &amp;&amp; value._toPointer) return value._toPointer();\n  return value;\n};\n\nconst RESERVED_KEYS = ['objectId', 'createdAt', 'updatedAt'];\nconst checkReservedKey = key => {\n  if (RESERVED_KEYS.indexOf(key) !== -1) {\n    throw new Error(`key[${key}] is reserved`);\n  }\n};\n\nconst handleBatchResults = results => {\n  const firstError = _.find(results, result => result instanceof Error);\n  if (!firstError) {\n    return results;\n  }\n  const error = new AVError(firstError.code, firstError.message);\n  error.results = results;\n  throw error;\n};\n\n// Helper function to get a value from a Backbone object as a property\n// or as a function.\nfunction getValue(object, prop) {\n  if (!(object &amp;&amp; object[prop])) {\n    return null;\n  }\n  return _.isFunction(object[prop]) ? object[prop]() : object[prop];\n}\n\n// AV.Object is analogous to the Java AVObject.\n// It also implements the same interface as a Backbone model.\n\nmodule.exports = function(AV) {\n  /**\n   * Creates a new model with defined attributes. A client id (cid) is\n   * automatically generated and assigned for you.\n   *\n   * &lt;p>You won't normally call this method directly.  It is recommended that\n   * you use a subclass of &lt;code>AV.Object&lt;/code> instead, created by calling\n   * &lt;code>extend&lt;/code>.&lt;/p>\n   *\n   * &lt;p>However, if you don't want to use a subclass, or aren't sure which\n   * subclass is appropriate, you can use this form:&lt;pre>\n   *     var object = new AV.Object(\"ClassName\");\n   * &lt;/pre>\n   * That is basically equivalent to:&lt;pre>\n   *     var MyClass = AV.Object.extend(\"ClassName\");\n   *     var object = new MyClass();\n   * &lt;/pre>&lt;/p>\n   *\n   * @param {Object} attributes The initial set of data to store in the object.\n   * @param {Object} options A set of Backbone-like options for creating the\n   *     object.  The only option currently supported is \"collection\".\n   * @see AV.Object.extend\n   *\n   * @class\n   *\n   * &lt;p>The fundamental unit of AV data, which implements the Backbone Model\n   * interface.&lt;/p>\n   */\n  AV.Object = function(attributes, options) {\n    // Allow new AV.Object(\"ClassName\") as a shortcut to _create.\n    if (_.isString(attributes)) {\n      return AV.Object._create.apply(this, arguments);\n    }\n\n    attributes = attributes || {};\n    if (options &amp;&amp; options.parse) {\n      attributes = this.parse(attributes);\n      attributes = this._mergeMagicFields(attributes);\n    }\n    var defaults = getValue(this, 'defaults');\n    if (defaults) {\n      attributes = _.extend({}, defaults, attributes);\n    }\n    if (options &amp;&amp; options.collection) {\n      this.collection = options.collection;\n    }\n\n    this._serverData = {}; // The last known data for this object from cloud.\n    this._opSetQueue = [{}]; // List of sets of changes to the data.\n    this._flags = {};\n    this.attributes = {}; // The best estimate of this's current data.\n\n    this._hashedJSON = {}; // Hash of values of containers at last save.\n    this._escapedAttributes = {};\n    this.cid = _.uniqueId('c');\n    this.changed = {};\n    this._silent = {};\n    this._pending = {};\n    this.set(attributes, { silent: true });\n    this.changed = {};\n    this._silent = {};\n    this._pending = {};\n    this._hasData = true;\n    this._previousAttributes = _.clone(this.attributes);\n    this.initialize.apply(this, arguments);\n  };\n\n  /**\n   * @lends AV.Object.prototype\n   * @property {String} id The objectId of the AV Object.\n   */\n\n  /**\n   * Saves the given list of AV.Object.\n   * If any error is encountered, stops and calls the error handler.\n   *\n   * @example\n   * AV.Object.saveAll([object1, object2, ...]).then(function(list) {\n   *   // All the objects were saved.\n   * }, function(error) {\n   *   // An error occurred while saving one of the objects.\n   * });\n   *\n   * @param {Array} list A list of &lt;code>AV.Object&lt;/code>.\n   */\n  AV.Object.saveAll = function(list, options) {\n    return AV.Object._deepSaveAsync(list, null, options);\n  };\n\n  /**\n   * Fetch the given list of AV.Object.\n   *\n   * @param {AV.Object[]} objects A list of &lt;code>AV.Object&lt;/code>\n   * @param {AuthOptions} options\n   * @return {Promise.&lt;AV.Object[]>} The given list of &lt;code>AV.Object&lt;/code>, updated\n   */\n\n  AV.Object.fetchAll = (objects, options) =>\n    Promise.resolve()\n      .then(() =>\n        _request(\n          'batch',\n          null,\n          null,\n          'POST',\n          {\n            requests: _.map(objects, object => {\n              if (!object.className)\n                throw new Error('object must have className to fetch');\n              if (!object.id) throw new Error('object must have id to fetch');\n              if (object.dirty())\n                throw new Error('object is modified but not saved');\n              return {\n                method: 'GET',\n                path: `/1.1/classes/${object.className}/${object.id}`,\n              };\n            }),\n          },\n          options\n        )\n      )\n      .then(function(response) {\n        const results = _.map(objects, function(object, i) {\n          if (response[i].success) {\n            const fetchedAttrs = object.parse(response[i].success);\n            object._cleanupUnsetKeys(fetchedAttrs);\n            object._finishFetch(fetchedAttrs);\n            return object;\n          }\n          if (response[i].success === null) {\n            return new AVError(AVError.OBJECT_NOT_FOUND, 'Object not found.');\n          }\n          return new AVError(response[i].error.code, response[i].error.error);\n        });\n        return handleBatchResults(results);\n      });\n\n  // Attach all inheritable methods to the AV.Object prototype.\n  _.extend(\n    AV.Object.prototype,\n    AV.Events,\n    /** @lends AV.Object.prototype */ {\n      _fetchWhenSave: false,\n\n      /**\n       * Initialize is an empty function by default. Override it with your own\n       * initialization logic.\n       */\n      initialize: function() {},\n\n      /**\n       * Set whether to enable fetchWhenSave option when updating object.\n       * When set true, SDK would fetch the latest object after saving.\n       * Default is false.\n       *\n       * @deprecated use AV.Object#save with options.fetchWhenSave instead\n       * @param {boolean} enable  true to enable fetchWhenSave option.\n       */\n      fetchWhenSave: function(enable) {\n        console.warn(\n          'AV.Object#fetchWhenSave is deprecated, use AV.Object#save with options.fetchWhenSave instead.'\n        );\n        if (!_.isBoolean(enable)) {\n          throw new Error('Expect boolean value for fetchWhenSave');\n        }\n        this._fetchWhenSave = enable;\n      },\n\n      /**\n       * Returns the object's objectId.\n       * @return {String} the objectId.\n       */\n      getObjectId: function() {\n        return this.id;\n      },\n\n      /**\n       * Returns the object's createdAt attribute.\n       * @return {Date}\n       */\n      getCreatedAt: function() {\n        return this.createdAt || this.get('createdAt');\n      },\n\n      /**\n       * Returns the object's updatedAt attribute.\n       * @return {Date}\n       */\n      getUpdatedAt: function() {\n        return this.updatedAt || this.get('updatedAt');\n      },\n\n      /**\n       * Returns a JSON version of the object.\n       * @return {Object}\n       */\n      toJSON: function(key, holder, seenObjects = []) {\n        return this._toFullJSON(seenObjects, false);\n      },\n\n      /**\n       * Returns a JSON version of the object with meta data.\n       * Inverse to {@link AV.parseJSON}\n       * @since 2.0.0\n       * @return {Object}\n       */\n      toFullJSON(seenObjects = []) {\n        return this._toFullJSON(seenObjects);\n      },\n\n      _toFullJSON: function(seenObjects, full = true) {\n        var json = _.clone(this.attributes);\n        if (_.isArray(seenObjects)) {\n          var newSeenObjects = seenObjects.concat(this);\n        }\n        AV._objectEach(json, function(val, key) {\n          json[key] = AV._encode(val, newSeenObjects, undefined, full);\n        });\n        AV._objectEach(this._operations, function(val, key) {\n          json[key] = val;\n        });\n\n        if (_.has(this, 'id')) {\n          json.objectId = this.id;\n        }\n        _(['createdAt', 'updatedAt']).each(key => {\n          if (_.has(this, key)) {\n            const val = this[key];\n            json[key] = _.isDate(val) ? val.toJSON() : val;\n          }\n        });\n        if (full) {\n          json.__type = 'Object';\n          if (_.isArray(seenObjects) &amp;&amp; seenObjects.length)\n            json.__type = 'Pointer';\n          json.className = this.className;\n        }\n        return json;\n      },\n\n      /**\n       * Updates _hashedJSON to reflect the current state of this object.\n       * Adds any changed hash values to the set of pending changes.\n       * @private\n       */\n      _refreshCache: function() {\n        var self = this;\n        if (self._refreshingCache) {\n          return;\n        }\n        self._refreshingCache = true;\n        AV._objectEach(this.attributes, function(value, key) {\n          if (value instanceof AV.Object) {\n            value._refreshCache();\n          } else if (_.isObject(value)) {\n            if (self._resetCacheForKey(key)) {\n              self.set(key, new AV.Op.Set(value), { silent: true });\n            }\n          }\n        });\n        delete self._refreshingCache;\n      },\n\n      /**\n       * Returns true if this object has been modified since its last\n       * save/refresh.  If an attribute is specified, it returns true only if that\n       * particular attribute has been modified since the last save/refresh.\n       * @param {String} attr An attribute name (optional).\n       * @return {Boolean}\n       */\n      dirty: function(attr) {\n        this._refreshCache();\n\n        var currentChanges = _.last(this._opSetQueue);\n\n        if (attr) {\n          return currentChanges[attr] ? true : false;\n        }\n        if (!this.id) {\n          return true;\n        }\n        if (_.keys(currentChanges).length > 0) {\n          return true;\n        }\n        return false;\n      },\n\n      /**\n       * Gets a Pointer referencing this Object.\n       * @private\n       */\n      _toPointer: function() {\n        // if (!this.id) {\n        //   throw new Error(\"Can't serialize an unsaved AV.Object\");\n        // }\n        return {\n          __type: 'Pointer',\n          className: this.className,\n          objectId: this.id,\n        };\n      },\n\n      /**\n       * Gets the value of an attribute.\n       * @param {String} attr The string name of an attribute.\n       */\n      get: function(attr) {\n        switch (attr) {\n          case 'objectId':\n            return this.id;\n          case 'createdAt':\n          case 'updatedAt':\n            return this[attr];\n          default:\n            return this.attributes[attr];\n        }\n      },\n\n      /**\n       * Gets a relation on the given class for the attribute.\n       * @param {String} attr The attribute to get the relation for.\n       * @return {AV.Relation}\n       */\n      relation: function(attr) {\n        var value = this.get(attr);\n        if (value) {\n          if (!(value instanceof AV.Relation)) {\n            throw new Error('Called relation() on non-relation field ' + attr);\n          }\n          value._ensureParentAndKey(this, attr);\n          return value;\n        } else {\n          return new AV.Relation(this, attr);\n        }\n      },\n\n      /**\n       * Gets the HTML-escaped value of an attribute.\n       */\n      escape: function(attr) {\n        var html = this._escapedAttributes[attr];\n        if (html) {\n          return html;\n        }\n        var val = this.attributes[attr];\n        var escaped;\n        if (isNullOrUndefined(val)) {\n          escaped = '';\n        } else {\n          escaped = _.escape(val.toString());\n        }\n        this._escapedAttributes[attr] = escaped;\n        return escaped;\n      },\n\n      /**\n       * Returns &lt;code>true&lt;/code> if the attribute contains a value that is not\n       * null or undefined.\n       * @param {String} attr The string name of the attribute.\n       * @return {Boolean}\n       */\n      has: function(attr) {\n        return !isNullOrUndefined(this.attributes[attr]);\n      },\n\n      /**\n       * Pulls \"special\" fields like objectId, createdAt, etc. out of attrs\n       * and puts them on \"this\" directly.  Removes them from attrs.\n       * @param attrs - A dictionary with the data for this AV.Object.\n       * @private\n       */\n      _mergeMagicFields: function(attrs) {\n        // Check for changes of magic fields.\n        var model = this;\n        var specialFields = ['objectId', 'createdAt', 'updatedAt'];\n        AV._arrayEach(specialFields, function(attr) {\n          if (attrs[attr]) {\n            if (attr === 'objectId') {\n              model.id = attrs[attr];\n            } else if (\n              (attr === 'createdAt' || attr === 'updatedAt') &amp;&amp;\n              !_.isDate(attrs[attr])\n            ) {\n              model[attr] = AV._parseDate(attrs[attr]);\n            } else {\n              model[attr] = attrs[attr];\n            }\n            delete attrs[attr];\n          }\n        });\n        return attrs;\n      },\n\n      /**\n       * Returns the json to be sent to the server.\n       * @private\n       */\n      _startSave: function() {\n        this._opSetQueue.push({});\n      },\n\n      /**\n       * Called when a save fails because of an error. Any changes that were part\n       * of the save need to be merged with changes made after the save. This\n       * might throw an exception is you do conflicting operations. For example,\n       * if you do:\n       *   object.set(\"foo\", \"bar\");\n       *   object.set(\"invalid field name\", \"baz\");\n       *   object.save();\n       *   object.increment(\"foo\");\n       * then this will throw when the save fails and the client tries to merge\n       * \"bar\" with the +1.\n       * @private\n       */\n      _cancelSave: function() {\n        var self = this;\n        var failedChanges = _.first(this._opSetQueue);\n        this._opSetQueue = _.rest(this._opSetQueue);\n        var nextChanges = _.first(this._opSetQueue);\n        AV._objectEach(failedChanges, function(op, key) {\n          var op1 = failedChanges[key];\n          var op2 = nextChanges[key];\n          if (op1 &amp;&amp; op2) {\n            nextChanges[key] = op2._mergeWithPrevious(op1);\n          } else if (op1) {\n            nextChanges[key] = op1;\n          }\n        });\n        this._saving = this._saving - 1;\n      },\n\n      /**\n       * Called when a save completes successfully. This merges the changes that\n       * were saved into the known server data, and overrides it with any data\n       * sent directly from the server.\n       * @private\n       */\n      _finishSave: function(serverData) {\n        // Grab a copy of any object referenced by this object. These instances\n        // may have already been fetched, and we don't want to lose their data.\n        // Note that doing it like this means we will unify separate copies of the\n        // same object, but that's a risk we have to take.\n        var fetchedObjects = {};\n        AV._traverse(this.attributes, function(object) {\n          if (object instanceof AV.Object &amp;&amp; object.id &amp;&amp; object._hasData) {\n            fetchedObjects[object.id] = object;\n          }\n        });\n\n        var savedChanges = _.first(this._opSetQueue);\n        this._opSetQueue = _.rest(this._opSetQueue);\n        this._applyOpSet(savedChanges, this._serverData);\n        this._mergeMagicFields(serverData);\n        var self = this;\n        AV._objectEach(serverData, function(value, key) {\n          self._serverData[key] = AV._decode(value, key);\n\n          // Look for any objects that might have become unfetched and fix them\n          // by replacing their values with the previously observed values.\n          var fetched = AV._traverse(self._serverData[key], function(object) {\n            if (object instanceof AV.Object &amp;&amp; fetchedObjects[object.id]) {\n              return fetchedObjects[object.id];\n            }\n          });\n          if (fetched) {\n            self._serverData[key] = fetched;\n          }\n        });\n        this._rebuildAllEstimatedData();\n        const opSetQueue = this._opSetQueue.map(_.clone);\n        this._refreshCache();\n        this._opSetQueue = opSetQueue;\n        this._saving = this._saving - 1;\n      },\n\n      /**\n       * Called when a fetch or login is complete to set the known server data to\n       * the given object.\n       * @private\n       */\n      _finishFetch: function(serverData, hasData) {\n        // Clear out any changes the user might have made previously.\n        this._opSetQueue = [{}];\n\n        // Bring in all the new server data.\n        this._mergeMagicFields(serverData);\n        var self = this;\n        AV._objectEach(serverData, function(value, key) {\n          self._serverData[key] = AV._decode(value, key);\n        });\n\n        // Refresh the attributes.\n        this._rebuildAllEstimatedData();\n\n        // Clear out the cache of mutable containers.\n        this._refreshCache();\n        this._opSetQueue = [{}];\n\n        this._hasData = hasData;\n      },\n\n      /**\n       * Applies the set of AV.Op in opSet to the object target.\n       * @private\n       */\n      _applyOpSet: function(opSet, target) {\n        var self = this;\n        AV._objectEach(opSet, function(change, key) {\n          const [value, actualTarget, actualKey] = findValue(target, key);\n          setValue(target, key, change._estimate(value, self, key));\n          if (actualTarget &amp;&amp; actualTarget[actualKey] === AV.Op._UNSET) {\n            delete actualTarget[actualKey];\n          }\n        });\n      },\n\n      /**\n       * Replaces the cached value for key with the current value.\n       * Returns true if the new value is different than the old value.\n       * @private\n       */\n      _resetCacheForKey: function(key) {\n        var value = this.attributes[key];\n        if (\n          _.isObject(value) &amp;&amp;\n          !(value instanceof AV.Object) &amp;&amp;\n          !(value instanceof AV.File)\n        ) {\n          var json = JSON.stringify(recursiveToPointer(value));\n          if (this._hashedJSON[key] !== json) {\n            var wasSet = !!this._hashedJSON[key];\n            this._hashedJSON[key] = json;\n            return wasSet;\n          }\n        }\n        return false;\n      },\n\n      /**\n       * Populates attributes[key] by starting with the last known data from the\n       * server, and applying all of the local changes that have been made to that\n       * key since then.\n       * @private\n       */\n      _rebuildEstimatedDataForKey: function(key) {\n        var self = this;\n        delete this.attributes[key];\n        if (this._serverData[key]) {\n          this.attributes[key] = this._serverData[key];\n        }\n        AV._arrayEach(this._opSetQueue, function(opSet) {\n          var op = opSet[key];\n          if (op) {\n            const [value, actualTarget, actualKey, firstKey] = findValue(\n              self.attributes,\n              key\n            );\n            setValue(self.attributes, key, op._estimate(value, self, key));\n            if (actualTarget &amp;&amp; actualTarget[actualKey] === AV.Op._UNSET) {\n              delete actualTarget[actualKey];\n            }\n            self._resetCacheForKey(firstKey);\n          }\n        });\n      },\n\n      /**\n       * Populates attributes by starting with the last known data from the\n       * server, and applying all of the local changes that have been made since\n       * then.\n       * @private\n       */\n      _rebuildAllEstimatedData: function() {\n        var self = this;\n\n        var previousAttributes = _.clone(this.attributes);\n\n        this.attributes = _.clone(this._serverData);\n        AV._arrayEach(this._opSetQueue, function(opSet) {\n          self._applyOpSet(opSet, self.attributes);\n          AV._objectEach(opSet, function(op, key) {\n            self._resetCacheForKey(key);\n          });\n        });\n\n        // Trigger change events for anything that changed because of the fetch.\n        AV._objectEach(previousAttributes, function(oldValue, key) {\n          if (self.attributes[key] !== oldValue) {\n            self.trigger('change:' + key, self, self.attributes[key], {});\n          }\n        });\n        AV._objectEach(this.attributes, function(newValue, key) {\n          if (!_.has(previousAttributes, key)) {\n            self.trigger('change:' + key, self, newValue, {});\n          }\n        });\n      },\n\n      /**\n       * Sets a hash of model attributes on the object, firing\n       * &lt;code>\"change\"&lt;/code> unless you choose to silence it.\n       *\n       * &lt;p>You can call it with an object containing keys and values, or with one\n       * key and value.  For example:&lt;/p>\n       *\n       * @example\n       * gameTurn.set({\n       *   player: player1,\n       *   diceRoll: 2\n       * }, {\n       *   error: function(gameTurnAgain, error) {\n       *     // The set failed validation.\n       *   }\n       * });\n       *\n       * game.set(\"currentPlayer\", player2, {\n       *   error: function(gameTurnAgain, error) {\n       *     // The set failed validation.\n       *   }\n       * });\n       *\n       * game.set(\"finished\", true);\n       *\n       * @param {String} key The key to set.\n       * @param {Any} value The value to give it.\n       * @param {Object} [options]\n       * @param {Boolean} [options.silent]\n       * @return {AV.Object} self if succeeded, throws if the value is not valid.\n       * @see AV.Object#validate\n       */\n      set: function(key, value, options) {\n        var attrs;\n        if (_.isObject(key) || isNullOrUndefined(key)) {\n          attrs = _.mapObject(key, function(v, k) {\n            checkReservedKey(k);\n            return AV._decode(v, k);\n          });\n          options = value;\n        } else {\n          attrs = {};\n          checkReservedKey(key);\n          attrs[key] = AV._decode(value, key);\n        }\n\n        // Extract attributes and options.\n        options = options || {};\n        if (!attrs) {\n          return this;\n        }\n        if (attrs instanceof AV.Object) {\n          attrs = attrs.attributes;\n        }\n\n        // If the unset option is used, every attribute should be a Unset.\n        if (options.unset) {\n          AV._objectEach(attrs, function(unused_value, key) {\n            attrs[key] = new AV.Op.Unset();\n          });\n        }\n\n        // Apply all the attributes to get the estimated values.\n        var dataToValidate = _.clone(attrs);\n        var self = this;\n        AV._objectEach(dataToValidate, function(value, key) {\n          if (value instanceof AV.Op) {\n            dataToValidate[key] = value._estimate(\n              self.attributes[key],\n              self,\n              key\n            );\n            if (dataToValidate[key] === AV.Op._UNSET) {\n              delete dataToValidate[key];\n            }\n          }\n        });\n\n        // Run validation.\n        this._validate(attrs, options);\n\n        options.changes = {};\n        var escaped = this._escapedAttributes;\n        var prev = this._previousAttributes || {};\n\n        // Update attributes.\n        AV._arrayEach(_.keys(attrs), function(attr) {\n          var val = attrs[attr];\n\n          // If this is a relation object we need to set the parent correctly,\n          // since the location where it was parsed does not have access to\n          // this object.\n          if (val instanceof AV.Relation) {\n            val.parent = self;\n          }\n\n          if (!(val instanceof AV.Op)) {\n            val = new AV.Op.Set(val);\n          }\n\n          // See if this change will actually have any effect.\n          var isRealChange = true;\n          if (\n            val instanceof AV.Op.Set &amp;&amp;\n            _.isEqual(self.attributes[attr], val.value)\n          ) {\n            isRealChange = false;\n          }\n\n          if (isRealChange) {\n            delete escaped[attr];\n            if (options.silent) {\n              self._silent[attr] = true;\n            } else {\n              options.changes[attr] = true;\n            }\n          }\n\n          var currentChanges = _.last(self._opSetQueue);\n          currentChanges[attr] = val._mergeWithPrevious(currentChanges[attr]);\n          self._rebuildEstimatedDataForKey(attr);\n\n          if (isRealChange) {\n            self.changed[attr] = self.attributes[attr];\n            if (!options.silent) {\n              self._pending[attr] = true;\n            }\n          } else {\n            delete self.changed[attr];\n            delete self._pending[attr];\n          }\n        });\n\n        if (!options.silent) {\n          this.change(options);\n        }\n        return this;\n      },\n\n      /**\n       * Remove an attribute from the model, firing &lt;code>\"change\"&lt;/code> unless\n       * you choose to silence it. This is a noop if the attribute doesn't\n       * exist.\n       */\n      unset: function(attr, options) {\n        options = options || {};\n        options.unset = true;\n        return this.set(attr, null, options);\n      },\n\n      /**\n       * Atomically increments the value of the given attribute the next time the\n       * object is saved. If no amount is specified, 1 is used by default.\n       *\n       * @param attr {String} The key.\n       * @param amount {Number} The amount to increment by.\n       */\n      increment: function(attr, amount) {\n        if (_.isUndefined(amount) || _.isNull(amount)) {\n          amount = 1;\n        }\n        return this.set(attr, new AV.Op.Increment(amount));\n      },\n\n      /**\n       * Atomically add an object to the end of the array associated with a given\n       * key.\n       * @param attr {String} The key.\n       * @param item {} The item to add.\n       */\n      add: function(attr, item) {\n        return this.set(attr, new AV.Op.Add(ensureArray(item)));\n      },\n\n      /**\n       * Atomically add an object to the array associated with a given key, only\n       * if it is not already present in the array. The position of the insert is\n       * not guaranteed.\n       *\n       * @param attr {String} The key.\n       * @param item {} The object to add.\n       */\n      addUnique: function(attr, item) {\n        return this.set(attr, new AV.Op.AddUnique(ensureArray(item)));\n      },\n\n      /**\n       * Atomically remove all instances of an object from the array associated\n       * with a given key.\n       *\n       * @param attr {String} The key.\n       * @param item {} The object to remove.\n       */\n      remove: function(attr, item) {\n        return this.set(attr, new AV.Op.Remove(ensureArray(item)));\n      },\n\n      /**\n       * Atomically apply a \"bit and\" operation on the value associated with a\n       * given key.\n       *\n       * @param attr {String} The key.\n       * @param value {Number} The value to apply.\n       */\n      bitAnd(attr, value) {\n        return this.set(attr, new AV.Op.BitAnd(value));\n      },\n\n      /**\n       * Atomically apply a \"bit or\" operation on the value associated with a\n       * given key.\n       *\n       * @param attr {String} The key.\n       * @param value {Number} The value to apply.\n       */\n      bitOr(attr, value) {\n        return this.set(attr, new AV.Op.BitOr(value));\n      },\n\n      /**\n       * Atomically apply a \"bit xor\" operation on the value associated with a\n       * given key.\n       *\n       * @param attr {String} The key.\n       * @param value {Number} The value to apply.\n       */\n      bitXor(attr, value) {\n        return this.set(attr, new AV.Op.BitXor(value));\n      },\n\n      /**\n       * Returns an instance of a subclass of AV.Op describing what kind of\n       * modification has been performed on this field since the last time it was\n       * saved. For example, after calling object.increment(\"x\"), calling\n       * object.op(\"x\") would return an instance of AV.Op.Increment.\n       *\n       * @param attr {String} The key.\n       * @returns {AV.Op} The operation, or undefined if none.\n       */\n      op: function(attr) {\n        return _.last(this._opSetQueue)[attr];\n      },\n\n      /**\n       * Clear all attributes on the model, firing &lt;code>\"change\"&lt;/code> unless\n       * you choose to silence it.\n       */\n      clear: function(options) {\n        options = options || {};\n        options.unset = true;\n        var keysToClear = _.extend(this.attributes, this._operations);\n        return this.set(keysToClear, options);\n      },\n\n      /**\n       * Returns a JSON-encoded set of operations to be sent with the next save\n       * request.\n       * @private\n       */\n      _getSaveJSON: function() {\n        var json = _.clone(_.first(this._opSetQueue));\n        AV._objectEach(json, function(op, key) {\n          json[key] = op.toJSON();\n        });\n        return json;\n      },\n\n      /**\n       * Returns true if this object can be serialized for saving.\n       * @private\n       */\n      _canBeSerialized: function() {\n        return AV.Object._canBeSerializedAsValue(this.attributes);\n      },\n\n      /**\n       * Fetch the model from the server. If the server's representation of the\n       * model differs from its current attributes, they will be overriden,\n       * triggering a &lt;code>\"change\"&lt;/code> event.\n       * @param {Object} fetchOptions Optional options to set 'keys',\n       *      'include' and 'includeACL' option.\n       * @param {AuthOptions} options\n       * @return {Promise} A promise that is fulfilled when the fetch\n       *     completes.\n       */\n      fetch: function(fetchOptions = {}, options) {\n        var self = this;\n        var request = _request(\n          'classes',\n          this.className,\n          this.id,\n          'GET',\n          transformFetchOptions(fetchOptions),\n          options\n        );\n        return request.then(function(response) {\n          const fetchedAttrs = self.parse(response);\n          if (!fetchOptions.keys) self._cleanupUnsetKeys(fetchedAttrs);\n          self._finishFetch(fetchedAttrs, true);\n          return self;\n        });\n      },\n\n      _cleanupUnsetKeys(fetchedAttrs) {\n        AV._objectEach(this._serverData, (value, key) => {\n          if (fetchedAttrs[key] === undefined) delete this._serverData[key];\n        });\n      },\n\n      /**\n       * Set a hash of model attributes, and save the model to the server.\n       * updatedAt will be updated when the request returns.\n       * You can either call it as:&lt;pre>\n       *   object.save();&lt;/pre>\n       * or&lt;pre>\n       *   object.save(null, options);&lt;/pre>\n       * or&lt;pre>\n       *   object.save(attrs, options);&lt;/pre>\n       * or&lt;pre>\n       *   object.save(key, value, options);&lt;/pre>\n       *\n       * @example\n       * gameTurn.save({\n       *   player: \"Jake Cutter\",\n       *   diceRoll: 2\n       * }).then(function(gameTurnAgain) {\n       *   // The save was successful.\n       * }, function(error) {\n       *   // The save failed.  Error is an instance of AVError.\n       * });\n       *\n       * @param {AuthOptions} options AuthOptions plus:\n       * @param {Boolean} options.fetchWhenSave fetch and update object after save succeeded\n       * @param {AV.Query} options.query Save object only when it matches the query\n       * @return {Promise} A promise that is fulfilled when the save\n       *     completes.\n       * @see AVError\n       */\n      save: function(arg1, arg2, arg3) {\n        var i, attrs, current, options, saved;\n        if (_.isObject(arg1) || isNullOrUndefined(arg1)) {\n          attrs = arg1;\n          options = arg2;\n        } else {\n          attrs = {};\n          attrs[arg1] = arg2;\n          options = arg3;\n        }\n\n        options = _.clone(options) || {};\n        if (options.wait) {\n          current = _.clone(this.attributes);\n        }\n\n        var setOptions = _.clone(options) || {};\n        if (setOptions.wait) {\n          setOptions.silent = true;\n        }\n        if (attrs) {\n          this.set(attrs, setOptions);\n        }\n\n        var model = this;\n\n        var unsavedChildren = [];\n        var unsavedFiles = [];\n        AV.Object._findUnsavedChildren(model, unsavedChildren, unsavedFiles);\n        if (unsavedChildren.length + unsavedFiles.length > 1) {\n          return AV.Object._deepSaveAsync(this, model, options);\n        }\n\n        this._startSave();\n        this._saving = (this._saving || 0) + 1;\n\n        this._allPreviousSaves = this._allPreviousSaves || Promise.resolve();\n        this._allPreviousSaves = this._allPreviousSaves\n          .catch(e => {})\n          .then(function() {\n            var method = model.id ? 'PUT' : 'POST';\n\n            var json = model._getSaveJSON();\n            var query = {};\n\n            if (model._fetchWhenSave || options.fetchWhenSave) {\n              query['new'] = 'true';\n            }\n            // user login option\n            if (options._failOnNotExist) {\n              query.failOnNotExist = 'true';\n            }\n\n            if (options.query) {\n              var queryJSON;\n              if (typeof options.query.toJSON === 'function') {\n                queryJSON = options.query.toJSON();\n                if (queryJSON) {\n                  query.where = queryJSON.where;\n                }\n              }\n              if (!query.where) {\n                var error = new Error('options.query is not an AV.Query');\n                throw error;\n              }\n            }\n\n            _.extend(json, model._flags);\n\n            var route = 'classes';\n            var className = model.className;\n            if (model.className === '_User' &amp;&amp; !model.id) {\n              // Special-case user sign-up.\n              route = 'users';\n              className = null;\n            }\n            //hook makeRequest in options.\n            var makeRequest = options._makeRequest || _request;\n            var requestPromise = makeRequest(\n              route,\n              className,\n              model.id,\n              method,\n              json,\n              options,\n              query\n            );\n\n            requestPromise = requestPromise.then(\n              function(resp) {\n                var serverAttrs = model.parse(resp);\n                if (options.wait) {\n                  serverAttrs = _.extend(attrs || {}, serverAttrs);\n                }\n                model._finishSave(serverAttrs);\n                if (options.wait) {\n                  model.set(current, setOptions);\n                }\n                return model;\n              },\n              function(error) {\n                model._cancelSave();\n                throw error;\n              }\n            );\n\n            return requestPromise;\n          });\n        return this._allPreviousSaves;\n      },\n\n      /**\n       * Destroy this model on the server if it was already persisted.\n       * Optimistically removes the model from its collection, if it has one.\n       * @param {AuthOptions} options AuthOptions plus:\n       * @param {Boolean} [options.wait] wait for the server to respond\n       * before removal.\n       *\n       * @return {Promise} A promise that is fulfilled when the destroy\n       *     completes.\n       */\n      destroy: function(options) {\n        options = options || {};\n        var model = this;\n\n        var triggerDestroy = function() {\n          model.trigger('destroy', model, model.collection, options);\n        };\n\n        if (!this.id) {\n          return triggerDestroy();\n        }\n\n        if (!options.wait) {\n          triggerDestroy();\n        }\n\n        var request = _request(\n          'classes',\n          this.className,\n          this.id,\n          'DELETE',\n          this._flags,\n          options\n        );\n        return request.then(function() {\n          if (options.wait) {\n            triggerDestroy();\n          }\n          return model;\n        });\n      },\n\n      /**\n       * Converts a response into the hash of attributes to be set on the model.\n       * @ignore\n       */\n      parse: function(resp) {\n        var output = _.clone(resp);\n        _(['createdAt', 'updatedAt']).each(function(key) {\n          if (output[key]) {\n            output[key] = AV._parseDate(output[key]);\n          }\n        });\n        if (output.createdAt &amp;&amp; !output.updatedAt) {\n          output.updatedAt = output.createdAt;\n        }\n        return output;\n      },\n\n      /**\n       * Creates a new model with identical attributes to this one.\n       * @return {AV.Object}\n       */\n      clone: function() {\n        return new this.constructor(this.attributes);\n      },\n\n      /**\n       * Returns true if this object has never been saved to AV.\n       * @return {Boolean}\n       */\n      isNew: function() {\n        return !this.id;\n      },\n\n      /**\n       * Call this method to manually fire a `\"change\"` event for this model and\n       * a `\"change:attribute\"` event for each changed attribute.\n       * Calling this will cause all objects observing the model to update.\n       */\n      change: function(options) {\n        options = options || {};\n        var changing = this._changing;\n        this._changing = true;\n\n        // Silent changes become pending changes.\n        var self = this;\n        AV._objectEach(this._silent, function(attr) {\n          self._pending[attr] = true;\n        });\n\n        // Silent changes are triggered.\n        var changes = _.extend({}, options.changes, this._silent);\n        this._silent = {};\n        AV._objectEach(changes, function(unused_value, attr) {\n          self.trigger('change:' + attr, self, self.get(attr), options);\n        });\n        if (changing) {\n          return this;\n        }\n\n        // This is to get around lint not letting us make a function in a loop.\n        var deleteChanged = function(value, attr) {\n          if (!self._pending[attr] &amp;&amp; !self._silent[attr]) {\n            delete self.changed[attr];\n          }\n        };\n\n        // Continue firing `\"change\"` events while there are pending changes.\n        while (!_.isEmpty(this._pending)) {\n          this._pending = {};\n          this.trigger('change', this, options);\n          // Pending and silent changes still remain.\n          AV._objectEach(this.changed, deleteChanged);\n          self._previousAttributes = _.clone(this.attributes);\n        }\n\n        this._changing = false;\n        return this;\n      },\n\n      /**\n       * Determine if the model has changed since the last &lt;code>\"change\"&lt;/code>\n       * event.  If you specify an attribute name, determine if that attribute\n       * has changed.\n       * @param {String} attr Optional attribute name\n       * @return {Boolean}\n       */\n      hasChanged: function(attr) {\n        if (!arguments.length) {\n          return !_.isEmpty(this.changed);\n        }\n        return this.changed &amp;&amp; _.has(this.changed, attr);\n      },\n\n      /**\n       * Returns an object containing all the attributes that have changed, or\n       * false if there are no changed attributes. Useful for determining what\n       * parts of a view need to be updated and/or what attributes need to be\n       * persisted to the server. Unset attributes will be set to undefined.\n       * You can also pass an attributes object to diff against the model,\n       * determining if there *would be* a change.\n       */\n      changedAttributes: function(diff) {\n        if (!diff) {\n          return this.hasChanged() ? _.clone(this.changed) : false;\n        }\n        var changed = {};\n        var old = this._previousAttributes;\n        AV._objectEach(diff, function(diffVal, attr) {\n          if (!_.isEqual(old[attr], diffVal)) {\n            changed[attr] = diffVal;\n          }\n        });\n        return changed;\n      },\n\n      /**\n       * Gets the previous value of an attribute, recorded at the time the last\n       * &lt;code>\"change\"&lt;/code> event was fired.\n       * @param {String} attr Name of the attribute to get.\n       */\n      previous: function(attr) {\n        if (!arguments.length || !this._previousAttributes) {\n          return null;\n        }\n        return this._previousAttributes[attr];\n      },\n\n      /**\n       * Gets all of the attributes of the model at the time of the previous\n       * &lt;code>\"change\"&lt;/code> event.\n       * @return {Object}\n       */\n      previousAttributes: function() {\n        return _.clone(this._previousAttributes);\n      },\n\n      /**\n       * Checks if the model is currently in a valid state. It's only possible to\n       * get into an *invalid* state if you're using silent changes.\n       * @return {Boolean}\n       */\n      isValid: function() {\n        try {\n          this.validate(this.attributes);\n        } catch (error) {\n          return false;\n        }\n        return true;\n      },\n\n      /**\n       * You should not call this function directly unless you subclass\n       * &lt;code>AV.Object&lt;/code>, in which case you can override this method\n       * to provide additional validation on &lt;code>set&lt;/code> and\n       * &lt;code>save&lt;/code>.  Your implementation should throw an Error if\n       * the attrs is invalid\n       *\n       * @param {Object} attrs The current data to validate.\n       * @see AV.Object#set\n       */\n      validate: function(attrs) {\n        if (_.has(attrs, 'ACL') &amp;&amp; !(attrs.ACL instanceof AV.ACL)) {\n          throw new AVError(AVError.OTHER_CAUSE, 'ACL must be a AV.ACL.');\n        }\n      },\n\n      /**\n       * Run validation against a set of incoming attributes, returning `true`\n       * if all is well. If a specific `error` callback has been passed,\n       * call that instead of firing the general `\"error\"` event.\n       * @private\n       */\n      _validate: function(attrs, options) {\n        if (options.silent || !this.validate) {\n          return;\n        }\n        attrs = _.extend({}, this.attributes, attrs);\n        this.validate(attrs);\n      },\n\n      /**\n       * Returns the ACL for this object.\n       * @returns {AV.ACL} An instance of AV.ACL.\n       * @see AV.Object#get\n       */\n      getACL: function() {\n        return this.get('ACL');\n      },\n\n      /**\n       * Sets the ACL to be used for this object.\n       * @param {AV.ACL} acl An instance of AV.ACL.\n       * @param {Object} options Optional Backbone-like options object to be\n       *     passed in to set.\n       * @return {AV.Object} self\n       * @see AV.Object#set\n       */\n      setACL: function(acl, options) {\n        return this.set('ACL', acl, options);\n      },\n\n      disableBeforeHook: function() {\n        this.ignoreHook('beforeSave');\n        this.ignoreHook('beforeUpdate');\n        this.ignoreHook('beforeDelete');\n      },\n\n      disableAfterHook: function() {\n        this.ignoreHook('afterSave');\n        this.ignoreHook('afterUpdate');\n        this.ignoreHook('afterDelete');\n      },\n\n      ignoreHook: function(hookName) {\n        if (\n          !_.contains(\n            [\n              'beforeSave',\n              'afterSave',\n              'beforeUpdate',\n              'afterUpdate',\n              'beforeDelete',\n              'afterDelete',\n            ],\n            hookName\n          )\n        ) {\n          console.trace('Unsupported hookName: ' + hookName);\n        }\n\n        if (!AV.hookKey) {\n          console.trace('ignoreHook required hookKey');\n        }\n\n        if (!this._flags.__ignore_hooks) {\n          this._flags.__ignore_hooks = [];\n        }\n\n        this._flags.__ignore_hooks.push(hookName);\n      },\n    }\n  );\n\n  /**\n   * Creates an instance of a subclass of AV.Object for the give classname\n   * and id.\n   * @param  {String} className The name of the AV class backing this model.\n   * @param {String} id The object id of this model.\n   * @return {AV.Object} A new subclass instance of AV.Object.\n   */\n  AV.Object.createWithoutData = function(className, id, hasData) {\n    var result = new AV.Object(className);\n    result.id = id;\n    result._hasData = hasData;\n    return result;\n  };\n  /**\n   * Delete objects in batch.\n   * @param {AV.Object[]} objects The &lt;code>AV.Object&lt;/code> array to be deleted.\n   * @param {AuthOptions} options\n   * @return {Promise} A promise that is fulfilled when the save\n   *     completes.\n   */\n  AV.Object.destroyAll = function(objects, options = {}) {\n    if (!objects || objects.length === 0) {\n      return Promise.resolve();\n    }\n    const objectsByClassNameAndFlags = _.groupBy(objects, object =>\n      JSON.stringify({\n        className: object.className,\n        flags: object._flags,\n      })\n    );\n    const body = {\n      requests: _.map(objectsByClassNameAndFlags, objects => {\n        const ids = _.map(objects, 'id').join(',');\n        return {\n          method: 'DELETE',\n          path: `/1.1/classes/${objects[0].className}/${ids}`,\n          body: objects[0]._flags,\n        };\n      }),\n    };\n    return _request('batch', null, null, 'POST', body, options).then(\n      response => {\n        const firstError = _.find(response, result => !result.success);\n        if (firstError)\n          throw new AVError(firstError.error.code, firstError.error.error);\n        return undefined;\n      }\n    );\n  };\n\n  /**\n   * Returns the appropriate subclass for making new instances of the given\n   * className string.\n   * @private\n   */\n  AV.Object._getSubclass = function(className) {\n    if (!_.isString(className)) {\n      throw new Error('AV.Object._getSubclass requires a string argument.');\n    }\n    var ObjectClass = AV.Object._classMap[className];\n    if (!ObjectClass) {\n      ObjectClass = AV.Object.extend(className);\n      AV.Object._classMap[className] = ObjectClass;\n    }\n    return ObjectClass;\n  };\n\n  /**\n   * Creates an instance of a subclass of AV.Object for the given classname.\n   * @private\n   */\n  AV.Object._create = function(className, attributes, options) {\n    var ObjectClass = AV.Object._getSubclass(className);\n    return new ObjectClass(attributes, options);\n  };\n\n  // Set up a map of className to class so that we can create new instances of\n  // AV Objects from JSON automatically.\n  AV.Object._classMap = {};\n\n  AV.Object._extend = AV._extend;\n\n  /**\n   * Creates a new model with defined attributes,\n   * It's the same with\n   * &lt;pre>\n   *   new AV.Object(attributes, options);\n   *  &lt;/pre>\n   * @param {Object} attributes The initial set of data to store in the object.\n   * @param {Object} options A set of Backbone-like options for creating the\n   *     object.  The only option currently supported is \"collection\".\n   * @return {AV.Object}\n   * @since v0.4.4\n   * @see AV.Object\n   * @see AV.Object.extend\n   */\n  AV.Object['new'] = function(attributes, options) {\n    return new AV.Object(attributes, options);\n  };\n\n  /**\n   * Creates a new subclass of AV.Object for the given AV class name.\n   *\n   * &lt;p>Every extension of a AV class will inherit from the most recent\n   * previous extension of that class. When a AV.Object is automatically\n   * created by parsing JSON, it will use the most recent extension of that\n   * class.&lt;/p>\n   *\n   * @example\n   * var MyClass = AV.Object.extend(\"MyClass\", {\n   *     // Instance properties\n   * }, {\n   *     // Class properties\n   * });\n   *\n   * @param {String} className The name of the AV class backing this model.\n   * @param {Object} protoProps Instance properties to add to instances of the\n   *     class returned from this method.\n   * @param {Object} classProps Class properties to add the class returned from\n   *     this method.\n   * @return {Class} A new subclass of AV.Object.\n   */\n  AV.Object.extend = function(className, protoProps, classProps) {\n    // Handle the case with only two args.\n    if (!_.isString(className)) {\n      if (className &amp;&amp; _.has(className, 'className')) {\n        return AV.Object.extend(className.className, className, protoProps);\n      } else {\n        throw new Error(\n          \"AV.Object.extend's first argument should be the className.\"\n        );\n      }\n    }\n\n    // If someone tries to subclass \"User\", coerce it to the right type.\n    if (className === 'User') {\n      className = '_User';\n    }\n\n    var NewClassObject = null;\n    if (_.has(AV.Object._classMap, className)) {\n      var OldClassObject = AV.Object._classMap[className];\n      // This new subclass has been told to extend both from \"this\" and from\n      // OldClassObject. This is multiple inheritance, which isn't supported.\n      // For now, let's just pick one.\n      if (protoProps || classProps) {\n        NewClassObject = OldClassObject._extend(protoProps, classProps);\n      } else {\n        return OldClassObject;\n      }\n    } else {\n      protoProps = protoProps || {};\n      protoProps._className = className;\n      NewClassObject = this._extend(protoProps, classProps);\n    }\n    // Extending a subclass should reuse the classname automatically.\n    NewClassObject.extend = function(arg0) {\n      if (_.isString(arg0) || (arg0 &amp;&amp; _.has(arg0, 'className'))) {\n        return AV.Object.extend.apply(NewClassObject, arguments);\n      }\n      var newArguments = [className].concat(_.toArray(arguments));\n      return AV.Object.extend.apply(NewClassObject, newArguments);\n    };\n    // Add the query property descriptor.\n    Object.defineProperty(\n      NewClassObject,\n      'query',\n      Object.getOwnPropertyDescriptor(AV.Object, 'query')\n    );\n    NewClassObject['new'] = function(attributes, options) {\n      return new NewClassObject(attributes, options);\n    };\n    AV.Object._classMap[className] = NewClassObject;\n    return NewClassObject;\n  };\n\n  // ES6 class syntax support\n  Object.defineProperty(AV.Object.prototype, 'className', {\n    get: function() {\n      const className =\n        this._className ||\n        this.constructor._LCClassName ||\n        this.constructor.name;\n      // If someone tries to subclass \"User\", coerce it to the right type.\n      if (className === 'User') {\n        return '_User';\n      }\n      return className;\n    },\n  });\n\n  /**\n   * Register a class.\n   * If a subclass of &lt;code>AV.Object&lt;/code> is defined with your own implement\n   * rather then &lt;code>AV.Object.extend&lt;/code>, the subclass must be registered.\n   * @param {Function} klass A subclass of &lt;code>AV.Object&lt;/code>\n   * @param {String} [name] Specify the name of the class. Useful when the class might be uglified.\n   * @example\n   * class Person extend AV.Object {}\n   * AV.Object.register(Person);\n   */\n  AV.Object.register = (klass, name) => {\n    if (!(klass.prototype instanceof AV.Object)) {\n      throw new Error('registered class is not a subclass of AV.Object');\n    }\n    const className = name || klass.name;\n    if (!className.length) {\n      throw new Error('registered class must be named');\n    }\n    if (name) {\n      klass._LCClassName = name;\n    }\n    AV.Object._classMap[className] = klass;\n  };\n\n  /**\n   * Get a new Query of the current class\n   * @name query\n   * @memberof AV.Object\n   * @type AV.Query\n   * @readonly\n   * @since v3.1.0\n   * @example\n   * const Post = AV.Object.extend('Post');\n   * Post.query.equalTo('author', 'leancloud').find().then();\n   */\n  Object.defineProperty(AV.Object, 'query', {\n    get() {\n      return new AV.Query(this.prototype.className);\n    },\n  });\n\n  AV.Object._findUnsavedChildren = function(objects, children, files) {\n    AV._traverse(objects, function(object) {\n      if (object instanceof AV.Object) {\n        if (object.dirty()) {\n          children.push(object);\n        }\n        return;\n      }\n\n      if (object instanceof AV.File) {\n        if (!object.id) {\n          files.push(object);\n        }\n        return;\n      }\n    });\n  };\n\n  AV.Object._canBeSerializedAsValue = function(object) {\n    var canBeSerializedAsValue = true;\n\n    if (object instanceof AV.Object || object instanceof AV.File) {\n      canBeSerializedAsValue = !!object.id;\n    } else if (_.isArray(object)) {\n      AV._arrayEach(object, function(child) {\n        if (!AV.Object._canBeSerializedAsValue(child)) {\n          canBeSerializedAsValue = false;\n        }\n      });\n    } else if (_.isObject(object)) {\n      AV._objectEach(object, function(child) {\n        if (!AV.Object._canBeSerializedAsValue(child)) {\n          canBeSerializedAsValue = false;\n        }\n      });\n    }\n\n    return canBeSerializedAsValue;\n  };\n\n  AV.Object._deepSaveAsync = function(object, model, options) {\n    var unsavedChildren = [];\n    var unsavedFiles = [];\n    AV.Object._findUnsavedChildren(object, unsavedChildren, unsavedFiles);\n\n    var promise = Promise.resolve();\n    _.each(unsavedFiles, function(file) {\n      promise = promise.then(function() {\n        return file.save();\n      });\n    });\n\n    var objects = _.uniq(unsavedChildren);\n    var remaining = _.uniq(objects);\n\n    return promise\n      .then(function() {\n        return Promise._continueWhile(\n          function() {\n            return remaining.length > 0;\n          },\n          function() {\n            // Gather up all the objects that can be saved in this batch.\n            var batch = [];\n            var newRemaining = [];\n            AV._arrayEach(remaining, function(object) {\n              // Limit batches to 20 objects.\n              if (batch.length > 20) {\n                newRemaining.push(object);\n                return;\n              }\n\n              if (object._canBeSerialized()) {\n                batch.push(object);\n              } else {\n                newRemaining.push(object);\n              }\n            });\n            remaining = newRemaining;\n\n            // If we can't save any objects, there must be a circular reference.\n            if (batch.length === 0) {\n              return Promise.reject(\n                new AVError(\n                  AVError.OTHER_CAUSE,\n                  'Tried to save a batch with a cycle.'\n                )\n              );\n            }\n\n            // Reserve a spot in every object's save queue.\n            var readyToStart = Promise.resolve(\n              _.map(batch, function(object) {\n                return object._allPreviousSaves || Promise.resolve();\n              })\n            );\n\n            // Save a single batch, whether previous saves succeeded or failed.\n            const bathSavePromise = readyToStart.then(() =>\n              _request(\n                'batch',\n                null,\n                null,\n                'POST',\n                {\n                  requests: _.map(batch, function(object) {\n                    var method = object.id ? 'PUT' : 'POST';\n\n                    var json = object._getSaveJSON();\n                    var query = {};\n\n                    _.extend(json, object._flags);\n\n                    var route = 'classes';\n                    var className = object.className;\n                    var path = `/${route}/${className}`;\n                    if (object.className === '_User' &amp;&amp; !object.id) {\n                      // Special-case user sign-up.\n                      path = '/users';\n                    }\n\n                    var path = `/1.1${path}`;\n                    if (object.id) {\n                      path = path + '/' + object.id;\n                    }\n\n                    object._startSave();\n\n                    return {\n                      method: method,\n                      path: path,\n                      body: json,\n                    };\n                  }),\n                },\n                options\n              ).then(function(response) {\n                const results = _.map(batch, function(object, i) {\n                  if (response[i].success) {\n                    object._finishSave(object.parse(response[i].success));\n                    return object;\n                  }\n                  object._cancelSave();\n                  return new AVError(\n                    response[i].error.code,\n                    response[i].error.error\n                  );\n                });\n                return handleBatchResults(results);\n              })\n            );\n            AV._arrayEach(batch, function(object) {\n              object._allPreviousSaves = bathSavePromise;\n            });\n            return bathSavePromise;\n          }\n        );\n      })\n      .then(function() {\n        return object;\n      });\n  };\n};\n</code></pre>\n        </article>\n    </section>\n\n\n\n\n</div>\n\n<br class=\"clear\">\n\n<footer>\n    Documentation generated by <a href=\"https://github.com/jsdoc3/jsdoc\">JSDoc 3.5.5</a> on Wed Jul 18 2018 22:00:13 GMT+0800 (China Standard Time) using the <a href=\"https://github.com/clenemt/docdash\">docdash</a> theme.\n</footer>\n\n<script>prettyPrint();</script>\n<script src=\"/8c674e0a4abe98b065c8b19e62f328f9.js\"></script>\n</body>\n</html>\n"},"hash":"dc477c87e384b102bae8fc8a16fccdcb","cacheData":{}}